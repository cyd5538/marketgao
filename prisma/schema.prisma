// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  followingIds    String[]  @db.ObjectId
  hasNotification Boolean?
  sessions        Session[]
  accounts        Account[]
  posts           Post[]
  comments        Comment[]
  favorite        Favorite[]
  resevation      Reservation[]
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

// Session 모델은 사용자 세션 정보를 저장하는데 사용
// 세션을 삭제할 때 연결된 사용자도 함께 삭제
model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken 모델은 사용자 계정 인증을 위한 토큰 정보를 저장하는데 사용
model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Post {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  title        String
  localName    String
  koreanName   String
  latitude     String
  longitude    String
  address      String
  description  String?
  menu         String[]
  phoneNumber  String
  mainImage    String
  subImages    String[]
  link         String
  likedIds     String[] @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments          Comment[]
}

model Comment {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  content            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  profileImage       String
  userId             String   @db.ObjectId
  postId             String   @db.ObjectId
  user               User     @relation(fields: [userId], references: [id])
  post               Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Favorite {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  mainImage         String
  postId            String
  createdAt         DateTime @default(now())
  userId            String @db.ObjectId
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  mainImage         String
  postId            String
  date              DateTime
  userId            String @db.ObjectId
  createdAt         DateTime @default(now())
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}